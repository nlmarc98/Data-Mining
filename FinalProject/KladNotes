accDT = []
accKNN = []
accSVM = []
accNB = []
accRFC = []
accNN = []
accAB = []


data = 3
if data==1:
    X = data1[['Sepal Length', 'Sepal Width', 'Petal Length', 'Petal Width']]
    y = data1['Type']
    attributeNames = [u'Sepal Length', u'Sepal Width', u'Petal Length', u'Petal Width']
    classNames = [u'Iris-setosa', u'iris-Virginica', u'Iris-versicolor']
elif data==2:
    X = data2[['sepal.length', 'sepal.width', 'petal.length', 'petal.width']]
    y = data2['class']
    attributeNames = [u'Sepal Length', u'Sepal Width', u'Petal Length', u'Petal Width']
    classNames = [u'Iris-setosa', u'iris-Virginica', u'Iris-versicolor', u'Iris_mythica']
elif data==3:
    X = data3[['Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width', 'Attractiveness', 'LikelyToBuy', 'Review']]
    y = data3['Species']
    attributeNames = [u'Sepal Length', u'Sepal Width', u'Petal Length', u'Petal Width', u'Attractiveness', u'LikelyToBuy', u'Review']
    classNames = [u'setosa', u'virginica', u'versicolor']

#decision tree
X_train, X_test, y_train, y_test = train_test_split(X, y)
dtc = tree.DecisionTreeClassifier()   
dtc = dtc.fit(X_train,y_train)
treeprint.tree_print(dtc, attributeNames, classNames)
acc0=dtc.score(X_test, y_test, sample_weight=None)
print('accuracy decision tree',acc0)

#K-Nearest Neighbours
nb = 10 #neighBours
dm = 2 #DistanceMeasure 

neigh = KNeighborsClassifier(n_neighbors=nb, p=dm)
neigh = neigh.fit(X_train,y_train) 
predX = neigh.predict(X_test)
acc1= accuracy_score(y_test, predX)
print('accuracy KNN', acc1)

#support vector mashine
clf = svm.SVC()
prediction=clf.fit(X_train, y_train).predict(X_test)
acc3=accuracy_score(y_test, prediction)
print('accuracy SVM', acc3)

#naive bayes
gnb = GaussianNB()
predNB = gnb.fit(X_train, y_train).predict(X_test)
acc4=accuracy_score(y_test, predNB)
print('accuracy NB', acc4)

#Random forest classifier
clf = RandomForestClassifier(max_depth=None, random_state=0)
predictionRFC=clf.fit(X_train, y_train).predict(X_test)
acc5=accuracy_score(y_test, predictionRFC)
print('accuracy RFC',acc5)

#neural network
clf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(15,), random_state=1)
NN_prediction=clf.fit(X_train, y_train).predict(X_test)
acc6=accuracy_score(y_test, NN_prediction)
print('accuracy NN',acc6)

#adaboost
ABC_real = AdaBoostClassifier(n_estimators=100,  learning_rate=1)
predictionABC=ABC_real.fit(X_train, y_train).predict(X_test)
acc7=accuracy_score(y_test, predictionABC)
print('accuracy AdaBoost',acc7)
